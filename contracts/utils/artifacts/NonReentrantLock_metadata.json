{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "slotSeed",
						"type": "string"
					}
				],
				"name": "AcquireLockFailure",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "slotSeed",
						"type": "string"
					}
				],
				"name": "GetLockFailure",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "slotSeed",
						"type": "string"
					}
				],
				"name": "UnlockFailure",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC7201_NAMESPACE",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Library for managing reentrancy locks using EIP-7201 storage slots.  This library provides functions to acquire, release, and customize reentrancy locks. It uses `uint256` storage slots for efficient gas usage compared to `boolean` slots. Locks can be applied using default settings or customized with unique seeds for more granular control.  Key Features: - `getLock()`: Retrieves the default lock, reverting if already acquired. - `getLock(string memory seed)`: Retrieves a custom lock based on a unique seed. - `lock()` & `unlock()`: Securely acquire and release locks, reverting on failure. - `tryLock()` & `tryUnlock()`: Non-reverting lock functions that return success status. Example usage: ```solidity function criticalOperation() external {    NonReentrantLock.NonReentrantLock memory lock = \"critical.lock\".getLock();    lock.lock();     // Critical section code    lock.unlock(); } ```",
			"kind": "dev",
			"methods": {},
			"title": "NonReentrantLock",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/utils/NonReentrantLock.sol": "NonReentrantLock"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/SlotDerivation.sol": {
			"keccak256": "0x8447b57b63810fe2e367c09496a966f143ec0e825d71ddb9fce2506cff84b618",
			"license": "MIT",
			"urls": [
				"bzz-raw://996cb48f793bf151555045b37138e36b3cdb31d6bc6552d3149285260be00cfb",
				"dweb:/ipfs/QmcLaTTMNVbkMx58xhkp6GeFt4V3GtSyupZuaKG3vYW2Zc"
			]
		},
		"@openzeppelin/contracts/utils/StorageSlot.sol": {
			"keccak256": "0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97",
			"license": "MIT",
			"urls": [
				"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b",
				"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM"
			]
		},
		"contracts/utils/NonReentrantLock.sol": {
			"keccak256": "0x0dc18ba880e08c6052895fb3406fd3274b8ac7e60bbf5234cc7a2dfd7fb13b5e",
			"license": "MIT",
			"urls": [
				"bzz-raw://00a2fb75489acc96eba129b969bcc20fa7736d622f69f50fb58843f5d874678f",
				"dweb:/ipfs/QmPtmirQ4yKhAEkA6odEqc5cmPMViHrzLrG6PsVJQJRuUp"
			]
		}
	},
	"version": 1
}