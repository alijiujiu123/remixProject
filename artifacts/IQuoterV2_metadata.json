{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "path",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					}
				],
				"name": "quoteExactInput",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					},
					{
						"internalType": "uint160[]",
						"name": "sqrtPriceX96AfterList",
						"type": "uint160[]"
					},
					{
						"internalType": "uint32[]",
						"name": "initializedTicksCrossedList",
						"type": "uint32[]"
					},
					{
						"internalType": "uint256",
						"name": "gasEstimate",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "tokenIn",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "tokenOut",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "amountIn",
								"type": "uint256"
							},
							{
								"internalType": "uint24",
								"name": "fee",
								"type": "uint24"
							},
							{
								"internalType": "uint160",
								"name": "sqrtPriceLimitX96",
								"type": "uint160"
							}
						],
						"internalType": "struct IQuoterV2.QuoteExactInputSingleParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "quoteExactInputSingle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					},
					{
						"internalType": "uint160",
						"name": "sqrtPriceX96After",
						"type": "uint160"
					},
					{
						"internalType": "uint32",
						"name": "initializedTicksCrossed",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "gasEstimate",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "path",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"name": "quoteExactOutput",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint160[]",
						"name": "sqrtPriceX96AfterList",
						"type": "uint160[]"
					},
					{
						"internalType": "uint32[]",
						"name": "initializedTicksCrossedList",
						"type": "uint32[]"
					},
					{
						"internalType": "uint256",
						"name": "gasEstimate",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "tokenIn",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "tokenOut",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "uint24",
								"name": "fee",
								"type": "uint24"
							},
							{
								"internalType": "uint160",
								"name": "sqrtPriceLimitX96",
								"type": "uint160"
							}
						],
						"internalType": "struct IQuoterV2.QuoteExactOutputSingleParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "quoteExactOutputSingle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint160",
						"name": "sqrtPriceX96After",
						"type": "uint160"
					},
					{
						"internalType": "uint32",
						"name": "initializedTicksCrossed",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "gasEstimate",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"quoteExactInput(bytes,uint256)": {
					"params": {
						"amountIn": "The amount of the first token to swap",
						"path": "The path of the swap, i.e. each token pair and the pool fee"
					},
					"returns": {
						"amountOut": "The amount of the last token that would be received",
						"gasEstimate": "The estimate of the gas that the swap consumes",
						"initializedTicksCrossedList": "List of the initialized ticks that the swap crossed for each pool in the path",
						"sqrtPriceX96AfterList": "List of the sqrt price after the swap for each pool in the path"
					}
				},
				"quoteExactInputSingle((address,address,uint256,uint24,uint160))": {
					"params": {
						"params": "The params for the quote, encoded as `QuoteExactInputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountIn The desired input amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"
					},
					"returns": {
						"amountOut": "The amount of `tokenOut` that would be received",
						"gasEstimate": "The estimate of the gas that the swap consumes",
						"initializedTicksCrossed": "The number of initialized ticks that the swap crossed",
						"sqrtPriceX96After": "The sqrt price of the pool after the swap"
					}
				},
				"quoteExactOutput(bytes,uint256)": {
					"params": {
						"amountOut": "The amount of the last token to receive",
						"path": "The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order"
					},
					"returns": {
						"amountIn": "The amount of first token required to be paid",
						"gasEstimate": "The estimate of the gas that the swap consumes",
						"initializedTicksCrossedList": "List of the initialized ticks that the swap crossed for each pool in the path",
						"sqrtPriceX96AfterList": "List of the sqrt price after the swap for each pool in the path"
					}
				},
				"quoteExactOutputSingle((address,address,uint256,uint24,uint160))": {
					"params": {
						"params": "The params for the quote, encoded as `QuoteExactOutputSingleParams` tokenIn The token being swapped in tokenOut The token being swapped out fee The fee of the token pool to consider for the pair amountOut The desired output amount sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap"
					},
					"returns": {
						"amountIn": "The amount required as the input for the swap in order to receive `amountOut`",
						"gasEstimate": "The estimate of the gas that the swap consumes",
						"initializedTicksCrossed": "The number of initialized ticks that the swap crossed",
						"sqrtPriceX96After": "The sqrt price of the pool after the swap"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"quoteExactInput(bytes,uint256)": {
					"notice": "Returns the amount out received for a given exact input swap without executing the swap"
				},
				"quoteExactInputSingle((address,address,uint256,uint24,uint160))": {
					"notice": "Returns the amount out received for a given exact input but for a swap of a single pool"
				},
				"quoteExactOutput(bytes,uint256)": {
					"notice": "Returns the amount in required for a given exact output swap without executing the swap"
				},
				"quoteExactOutputSingle((address,address,uint256,uint24,uint160))": {
					"notice": "Returns the amount in required to receive the given exact output amount but for a swap of a single pool"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/falshloan/UniswapV3Data.sol": "IQuoterV2"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x81c274a60a7ae232ae3dc9ff3a4011b4849a853c13b0832cd3351bb1bb2f0dae",
			"license": "MIT",
			"urls": [
				"bzz-raw://9da0c20dc74358a2a76330818f3bac9d1e2ce3371aec847b9cbf5d147fbae4f6",
				"dweb:/ipfs/QmeczhmnFv1hbXKGLwbYXY6Rrytc9a5A2YaRi5QMMgjPnb"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c5fab4970634f9ab9a620983dc1c8a30153981a0b1a521666e269d0a11399d3",
				"dweb:/ipfs/QmVRnBC575MESGkEHndjujtR7qub2FzU9RWy9eKLp4hPZB"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
				"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
			]
		},
		"contracts/falshloan/UniswapV3Data.sol": {
			"keccak256": "0x0e4cd0fc0029391c867cbd74e8d7879c49169bab13334b6e8737b22a1a9ba25f",
			"license": "MIT",
			"urls": [
				"bzz-raw://d993007dd7befc9264f606a7e95f6fbfcb558580832325c3a0c5d2b6cb8034bc",
				"dweb:/ipfs/QmQ6BPSKQfSDcN3HDKJpFDq7YZtzNrdb6iAmr5Qoukd5ek"
			]
		}
	},
	"version": 1
}