{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "IndexOutOfBounds",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LinkedListNonexistentElement",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "version",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "nodeId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "value",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "enum LinkedList.LinkedType",
						"name": "linkedType",
						"type": "uint8"
					}
				],
				"name": "LinkedNode",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "version",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "nodeId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "value",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "enum LinkedList.UnlinkedType",
						"name": "unlinkedType",
						"type": "uint8"
					}
				],
				"name": "UnlinkedNode",
				"type": "event"
			}
		],
		"devdoc": {
			"details": "The library provides a generalized linked list structure,  supporting the storage of bytes32, uint256, and address types.  It allows operations such as adding, removing, retrieving, and updating elements,  while maintaining references to adjacent nodes for sequential navigation. Lists have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). Guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using LinkedList for LinkedList.AddressList;     // Declare a set state variable     LinkedList.AddressList private myList; } ``` Type `bytes32` (`Bytes32List`), `uint256` (`UintList`) and `address` (`AddressList`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/LinkedList.sol": "LinkedList"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/LinkedList.sol": {
			"keccak256": "0x708f2d811289306f1b4f7d1e60148b1d670ac85fdb77574687180c5689c73a1e",
			"license": "MIT",
			"urls": [
				"bzz-raw://c9020b7e0bb453e776375f4a912560ad7259722ae7eb6bcf1a6f6b82247c0011",
				"dweb:/ipfs/QmW1ZhTbZo4QkfDJE83JZYh4DYkm3cJbvPBqJrRJJRJb5Q"
			]
		}
	},
	"version": 1
}