{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "slotSeed",
						"type": "string"
					}
				],
				"name": "AcquireLockFailure",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "slotSeed",
						"type": "string"
					}
				],
				"name": "GetLockFailure",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "slotSeed",
						"type": "string"
					}
				],
				"name": "UnlockFailure",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC7201_NAMESPACE",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Library for managing transient reentrancy locks using EIP-1153 transient storage.  Provides functions to acquire, release, and customize locks. Locks are automatically  reset at the end of transactions, ensuring safe use even in multi-call scenarios.  Key Functions: - `getLock()`: Retrieves the default lock. - `getLock(string memory seed)`: Retrieves a custom lock based on a unique seed. - `lock()` & `unlock()`: Acquire and release locks, reverting on failure. - `tryLock()` & `tryUnlock()`: Non-reverting lock functions returning success status. Example usage: ```solidity function criticalOperation() external {    // NonReentrantLockTransientLibrary.getLock() also can get a default lock    NonReentrantLockTransientLibrary.NonReentrantLock memory lock = \"critical.lock\".getLock();    lock.lock();     // Critical section code    lock.unlock(); } ```",
			"kind": "dev",
			"methods": {},
			"title": "NonReentrantLockTransientLibrary",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/utils/NonReentrantLockTransient.sol": "NonReentrantLockTransientLibrary"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/SlotDerivation.sol": {
			"keccak256": "0x8447b57b63810fe2e367c09496a966f143ec0e825d71ddb9fce2506cff84b618",
			"license": "MIT",
			"urls": [
				"bzz-raw://996cb48f793bf151555045b37138e36b3cdb31d6bc6552d3149285260be00cfb",
				"dweb:/ipfs/QmcLaTTMNVbkMx58xhkp6GeFt4V3GtSyupZuaKG3vYW2Zc"
			]
		},
		"@openzeppelin/contracts/utils/TransientSlot.sol": {
			"keccak256": "0x9303ef5a2beb555e52ce56598de205ce07ca8988fc67d073687c06cb8fc973d1",
			"license": "MIT",
			"urls": [
				"bzz-raw://8b2e48fb42844c25e6cb38e7cfa1d91dcdc054613fd10f608833dbc677acf889",
				"dweb:/ipfs/QmT4HQxbgpWA3fZnK4dY3eXHNCoyBvpvzNq5k7eSt5mR5t"
			]
		},
		"contracts/utils/NonReentrantLockTransient.sol": {
			"keccak256": "0x8395d32aa1a006d4d911a460ec3322fb7caff564d792800a6e0925288323d28d",
			"license": "MIT",
			"urls": [
				"bzz-raw://45cb59afb157bbf2279efc741ad562568ab62bb9ef1dddeb95538d0b36d13776",
				"dweb:/ipfs/Qmenq9aaXMqAiouksH6cP15Fe5HDezSQhttAAxRK41Jq2r"
			]
		}
	},
	"version": 1
}