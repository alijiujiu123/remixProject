{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "selector",
						"type": "bytes4"
					},
					{
						"internalType": "address",
						"name": "newAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "oldAddress",
						"type": "address"
					}
				],
				"name": "AddSelectorAlreadyExist",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "key",
						"type": "address"
					}
				],
				"name": "AddressToFacetMapNonexistentKey",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FacetAddressZero",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FacetCutActionIllegal",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FacetCutArrayEmpty",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FunctionSelectorsEmpty",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "selector",
						"type": "bytes4"
					},
					{
						"internalType": "address",
						"name": "newAddress",
						"type": "address"
					}
				],
				"name": "ReplaceSelectorNotExist",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "selector",
						"type": "bytes4"
					}
				],
				"name": "SelectorIllegal",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "facetAddress",
								"type": "address"
							},
							{
								"internalType": "enum IDiamond.FacetCutAction",
								"name": "action",
								"type": "uint8"
							},
							{
								"internalType": "bytes4[]",
								"name": "functionSelectors",
								"type": "bytes4[]"
							}
						],
						"indexed": false,
						"internalType": "struct IDiamond.FacetCut[]",
						"name": "_diamondCut",
						"type": "tuple[]"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_init",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "_calldata",
						"type": "bytes"
					}
				],
				"name": "DiamondCut",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_init",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "_calldata",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "ok",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "resultData",
						"type": "bytes"
					}
				],
				"name": "InitCalldataExecute",
				"type": "event"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "facetAddress",
								"type": "address"
							},
							{
								"internalType": "enum IDiamond.FacetCutAction",
								"name": "action",
								"type": "uint8"
							},
							{
								"internalType": "bytes4[]",
								"name": "functionSelectors",
								"type": "bytes4[]"
							}
						],
						"internalType": "struct IDiamond.FacetCut[]",
						"name": "_diamondCut",
						"type": "tuple[]"
					},
					{
						"internalType": "address",
						"name": "_init",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_calldata",
						"type": "bytes"
					}
				],
				"name": "diamondCut",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "funcSign",
						"type": "string"
					}
				],
				"name": "getSelector",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Implements the DiamondCut functionality as per EIP-2535. This contract allows adding, replacing, and removing function selectors associated with facets. Future TODO: Implement role-based permission management at the facet or selector level.",
			"kind": "dev",
			"methods": {
				"diamondCut((address,uint8,bytes4[])[],address,bytes)": {
					"params": {
						"_calldata": "Function call data to be executed on _init using delegatecall.",
						"_diamondCut": "Array of facet modifications (add, replace, remove).",
						"_init": "Address of the contract or facet where _calldata will be executed."
					}
				},
				"getSelector(string)": {
					"details": "Computes the function selector from a given function signature string. Example: \"transfer(address,uint256)\" returns the selector for the transfer function.",
					"params": {
						"funcSign": "The function signature as a string."
					},
					"returns": {
						"_0": "The bytes4 function selector."
					}
				}
			},
			"title": "DiamondCutFacet",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"diamondCut((address,uint8,bytes4[])[],address,bytes)": {
					"notice": "Add, replace, or remove functions from facets and optionally execute an initialization function."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/proxy/EIP2535/DiamondCutFacet.sol": "DiamondCutFacet"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/SlotDerivation.sol": {
			"keccak256": "0x8447b57b63810fe2e367c09496a966f143ec0e825d71ddb9fce2506cff84b618",
			"license": "MIT",
			"urls": [
				"bzz-raw://996cb48f793bf151555045b37138e36b3cdb31d6bc6552d3149285260be00cfb",
				"dweb:/ipfs/QmcLaTTMNVbkMx58xhkp6GeFt4V3GtSyupZuaKG3vYW2Zc"
			]
		},
		"@openzeppelin/contracts/utils/StorageSlot.sol": {
			"keccak256": "0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97",
			"license": "MIT",
			"urls": [
				"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b",
				"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212",
			"license": "MIT",
			"urls": [
				"bzz-raw://821500c39d095eaa25b06f46e65f1d0e97c4c96b39227f79077dee7d9e84051f",
				"dweb:/ipfs/QmSTeGorKzSWF6HAmxo32uCZiEuKNvreQdUiX1AaYtUMTz"
			]
		},
		"contracts/proxy/EIP2535/ArrayUtils.sol": {
			"keccak256": "0x23d6077b123f15c3b06fb73a3b96e800e6573be4fb4cfaf0f0371e2f5918332b",
			"license": "MIT",
			"urls": [
				"bzz-raw://405cdac8f0e19ee818d7c6e3c691054f754930efe5a34f5d2967ea5d090314e1",
				"dweb:/ipfs/Qmcou61Huivr1F83JVxe3ce7c6noFJwLpUHGnnSXy3EBGs"
			]
		},
		"contracts/proxy/EIP2535/CommonStorage.sol": {
			"keccak256": "0x7c51885989588f5f290980252b53498f3be9afb4522db7bd43859736384bac77",
			"license": "MIT",
			"urls": [
				"bzz-raw://589c1a9521f3d393b56525512c2a85688173412cf280dd1998e02148fb7275b7",
				"dweb:/ipfs/QmTbBFPXweXcTRma9ByzcLZn5wfAVcFmXbfK39uyi4Ce8r"
			]
		},
		"contracts/proxy/EIP2535/DiamondCutFacet.sol": {
			"keccak256": "0x6ac333e6ea6f706f7d093067dd9d10c5d1b08bc843e78d1d9dfc575a6549552f",
			"license": "MIT",
			"urls": [
				"bzz-raw://341ad7d8efff44b2ae901aaafb4f3632052a92dd36b307eebca78a1290a14ffd",
				"dweb:/ipfs/QmZWzPfU3Etpzx4bJ1EwhH5C2uM9BE6b22XnMtgXrGTMha"
			]
		},
		"contracts/proxy/EIP2535/DiamondStorage.sol": {
			"keccak256": "0x5bb3609fecbd73b7a823710b47a2f6569fc615eca7e1d22da11f4211e68e513b",
			"license": "MIT",
			"urls": [
				"bzz-raw://858d3a9408cfb55afc23aa9eba9ca4eabf2551f3a49de4acc098c0e88b1b40b7",
				"dweb:/ipfs/QmWRX3BRAybJZtqtWgPkzej8EDM5LdRYY5ysuDeZEBwNWN"
			]
		},
		"contracts/proxy/EIP2535/IDiamond.sol": {
			"keccak256": "0x152a5941fe585b619dd0f433eca108ddcfe371910bd848c33e558acfa7ab0cd3",
			"license": "MIT",
			"urls": [
				"bzz-raw://616d35a7f4e29c9023ff667e0924436e7e88ac24bbd67f1f8b5e175a805241ab",
				"dweb:/ipfs/QmPnsF7pCMgWSUdK261YoNpAT36DhHuMWocX5HuKRh96bo"
			]
		},
		"contracts/proxy/EIP2535/IDiamondCut.sol": {
			"keccak256": "0xb1dcb551aadacc6c46c8fdf069651dd1a6d36f418ebd63bab88b3c4aa9a29c7e",
			"license": "MIT",
			"urls": [
				"bzz-raw://cec7d85802c2f367d588d4d6493deea2dce0762c13977c1280dca93f770560da",
				"dweb:/ipfs/QmZ472KAtqjuLFvx7rJEEq9STjfRdzR9kuC8Lv2SMHHbgu"
			]
		}
	},
	"version": 1
}